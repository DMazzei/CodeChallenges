package dmz.bjss.exercise.util;

import dmz.bjss.exercise.model.BasketItem;
import dmz.bjss.exercise.model.SpecialOffer;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
@PrepareForTest({JsonHelper.class})
public class JsonHelperTest {

    Path spoofPath = Paths.get("C:\\TEST");

    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(Paths.class);
        PowerMockito.mockStatic(Files.class);
        when(Paths.get(any(String.class))).thenReturn(spoofPath);
    }

    @Test
    public void LoadBasketItemsShouldReturnSuccess() throws Exception {
        System.out.println("LoadBasketItemsShouldReturnSuccess");

        String expectedJson = "[{\"id\": 101,\"name\": \"Soup\",\"unitPrice\": 0.65,\"unitType\": 0}]";
        when(Files.readAllBytes(any(Path.class))).thenReturn(expectedJson.getBytes());

        List<BasketItem> itemList;
        itemList = JsonHelper.LoadBasketItems(spoofPath.toUri());

        Integer expectedId = 101;

        assertNotNull("Item list should not be null", itemList);
        assertFalse("Item list should not be empty", itemList.isEmpty());
        assertEquals("Id value is incorrect", expectedId, itemList.get(0).getId());
    }

    @Test
    public void LoadBasketItemsShouldReturnFailure() {
        System.out.println("LoadBasketItemsShouldReturnFailure");

        String expectedJson = "[\"id\": 101,\"name\": \"Soup\",\"unitPrice\": 0.65,\"unitType\": 0]";
        try {
            when(Files.readAllBytes(any(Path.class))).thenReturn(expectedJson.getBytes());
            JsonHelper.LoadBasketItems(spoofPath.toUri());
            fail("Exception should've been thrown here.");
        } catch (IOException e) {
            assertNotNull(e);
            assertTrue(e.getMessage().contains("Can not construct instance of dmz.bjss.exercise.model.BasketItem"));
        } catch (Exception e) {
            assertNotNull(e);
        }
    }

    @Test
    public void LoadSpecialOffersShouldReturnSuccess() throws Exception {
        System.out.println("LoadSpecialOffersShouldReturnSuccess");

        String expectedJson = "[{\"id\": 201,\"itemCond\": 104,\"condQty\": 0,\"itemTarget\": 104,\"discount\": 0.1,\"description\": \"10% off\"}]";
        when(Files.readAllBytes(any(Path.class))).thenReturn(expectedJson.getBytes());

        List<SpecialOffer> dealList;
        dealList = JsonHelper.LoadSpecialOffer(spoofPath.toUri());

        Integer expectedId = 201;

        assertNotNull("Item list should not be null", dealList);
        assertFalse("Item list should not be empty", dealList.isEmpty());
        assertEquals("Id value is incorrect", expectedId, dealList.get(0).getId());
    }

    @Test
    public void LoadSpecialOffersShouldReturnFailure() {
        System.out.println("LoadSpecialOffersShouldReturnFailure");

        String expectedJson = "[\"id\": 101,\"name\": \"Soup\",\"unitPrice\": 0.65,\"unitType\": 0]";
        try {
            when(Files.readAllBytes(any(Path.class))).thenReturn(expectedJson.getBytes());
            JsonHelper.LoadSpecialOffer(spoofPath.toUri());
            fail("Exception should've been thrown here.");
        } catch (IOException e) {
            assertNotNull(e);
            assertTrue(e.getMessage().contains("Can not construct instance of dmz.bjss.exercise.model.SpecialOffer"));
        } catch (Exception e) {
            assertNotNull(e);
        }
    }
}
