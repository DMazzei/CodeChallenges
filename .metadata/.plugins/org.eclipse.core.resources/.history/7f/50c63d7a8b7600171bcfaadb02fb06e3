package dmz.bjss.exercise;

import dmz.bjss.exercise.model.Basket;
import dmz.bjss.exercise.model.BasketItem;
import dmz.bjss.exercise.model.SpecialOffer;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CalculateBasketTest {

    @Test
    public void CalculateBasketConstructorSuccess() {
        System.out.println("CalculateBasketConstructorSuccess");

        CalculateBasket underTest;
        Basket mockBasket = mock(Basket.class);
        List<SpecialOffer> mockList = mock(List.class);

        underTest = new CalculateBasket(mockBasket, mockList);
        assertNotNull("CalculateBasket should not be null", underTest);
    }

    @Test
    public void EvaluateDiscountShouldComputeSpecialOffer() {
        System.out.println("EvaluateDiscountShouldComputeSpecialOffer");

        CalculateBasket underTest;
        Basket mockBasket = mock(Basket.class);
        ArgumentCaptor<List> resultDealList = ArgumentCaptor.forClass(List.class);

        List<BasketItem> fakeItemList = new ArrayList<>();
        BasketItem fakeItem = new BasketItem();
        fakeItem.setId(1);
        fakeItem.setQuantity(1);
        fakeItem.setUnitPrice(1.0d);
        fakeItem.setName("Test Item");
        fakeItemList.add(fakeItem);

        List<SpecialOffer> fakeDealList = new ArrayList<>();
        SpecialOffer fakeDeal = new SpecialOffer();
        fakeDeal.setId(9);
        fakeDeal.setDescription("Test deal");
        fakeDeal.setItemCond(1);
        fakeDeal.setItemTarget(1);
        fakeDeal.setCondQty(0);
        fakeDeal.setDiscount(0.1d);
        fakeDealList.add(fakeDeal);

        when(mockBasket.getItems()).thenReturn(fakeItemList);

        underTest = new CalculateBasket(mockBasket, fakeDealList);
        underTest.EvaluateDiscount();

        Mockito.verify(mockBasket).setDeals(resultDealList.capture());
        List<SpecialOffer> capturedList = resultDealList.<List<SpecialOffer>>getValue();

        assertNotNull("Total value should not be null", capturedList);
        assertArrayEquals("Deal result is wrong", fakeDealList.toArray(), capturedList.toArray());
    }

    @Test
    public void ApplyDiscountShouldCalculateOneSpecialOffer() {
        System.out.println("ApplyDiscountShouldCalculateOneSpecialOffer");

        CalculateBasket underTest;
        Basket mockBasket = mock(Basket.class);
        BasketItem mockItemTarget = mock(BasketItem.class);
        ArgumentCaptor<Integer> resultDeal = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<Double> resultValueOff = ArgumentCaptor.forClass(Double.class);

        List<BasketItem> fakeItemList = new ArrayList<>();
        BasketItem fakeItem = new BasketItem();
        fakeItem.setId(1);
        fakeItem.setQuantity(1);
        fakeItem.setUnitPrice(5.0d);
        fakeItem.setName("Test Item");
        fakeItemList.add(fakeItem);

        List<SpecialOffer> fakeDealList = new ArrayList<>();
        SpecialOffer fakeDeal = new SpecialOffer();
        fakeDeal.setId(9);
        fakeDeal.setDescription("Test deal");
        fakeDeal.setItemCond(1);
        fakeDeal.setItemTarget(1);
        fakeDeal.setCondQty(0);
        fakeDeal.setDiscount(0.1d);
        fakeDealList.add(fakeDeal);

        when(mockBasket.getItems()).thenReturn(fakeItemList);
        when(mockItemTarget.getUnitPrice()).thenReturn(5.0d);
        when(mockItemTarget.getQuantity()).thenReturn(1);
        Double expectedValue = 0.5d;

        underTest = new CalculateBasket(mockBasket, fakeDealList);
        underTest.ApplyDiscount(fakeItem, mockItemTarget, fakeDeal);

        Mockito.verify(mockItemTarget).setDealApplied(resultDeal.capture());
        Mockito.verify(mockItemTarget).setValueOff(resultValueOff.capture());

        assertEquals("Deal id is wrong", fakeDeal.getId(), resultDeal.getValue());
        assertEquals("Final value off is wrong", expectedValue, resultValueOff.getValue());
    }

    @Test
    public void CalculateSubTotalShouldObtainCorrectValue() {
        System.out.println("CalculateSubTotalShouldObtainCorrectValue");

        CalculateBasket underTest;
        Basket mockBasket = mock(Basket.class);
        List<SpecialOffer> mockList = mock(List.class);
        ArgumentCaptor<Double> result = ArgumentCaptor.forClass(Double.class);

        List<BasketItem> fakeItemList = new ArrayList<>();
        BasketItem fakeItem1 = new BasketItem();
        fakeItem1.setQuantity(1);
        fakeItem1.setUnitPrice(1.0d);
        fakeItemList.add(fakeItem1);
        BasketItem fakeItem2 = new BasketItem();
        fakeItem2.setQuantity(1);
        fakeItem2.setUnitPrice(1.2d);
        fakeItemList.add(fakeItem2);

        when(mockBasket.getItems()).thenReturn(fakeItemList);

        Double expectedValue = 2.2d;

        underTest = new CalculateBasket(mockBasket, mockList);
        underTest.CalculateSubTotal();

        Mockito.verify(mockBasket).setSubtotal(result.capture());

        assertNotNull("Total value should not be null", result.getValue());
        assertEquals("Total value is incorrect", expectedValue, result.getValue());
    }

    @Test
    public void CalculateTotalShouldObtainCorrectValue() {
        System.out.println("CalculateTotalShouldObtainCorrectValue");

        CalculateBasket underTest;
        Basket mockBasket = mock(Basket.class);
        List<SpecialOffer> mockList = mock(List.class);
        ArgumentCaptor<Double> result = ArgumentCaptor.forClass(Double.class);

        List<BasketItem> fakeItemList = new ArrayList<>();
        BasketItem fakeItem1 = new BasketItem();
        fakeItem1.setQuantity(1);
        fakeItem1.setUnitPrice(1.0d);
        fakeItem1.setValueOff(0.5d);
        fakeItemList.add(fakeItem1);
        BasketItem fakeItem2 = new BasketItem();
        fakeItem2.setQuantity(2);
        fakeItem2.setUnitPrice(1.2d);
        fakeItem2.setValueOff(0.4d);
        fakeItemList.add(fakeItem2);

        when(mockBasket.getItems()).thenReturn(fakeItemList);

        Double expectedValue = 2.5d;

        underTest = new CalculateBasket(mockBasket, mockList);
        underTest.CalculateTotal();

        Mockito.verify(mockBasket).setTotal(result.capture());

        assertNotNull("Total value should not be null", result.getValue());
        assertEquals("Total value is incorrect", expectedValue, result.getValue());
    }
}
